//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SoloTravelerApp.Weather_NearestStore_ServiceRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Weather_NearestStore_ServiceRef.OmniWSDLServiceInterface")]
    public interface OmniWSDLServiceInterface {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/OmniWSDLServiceInterface/GetCrimeData", ReplyAction="http://tempuri.org/OmniWSDLServiceInterface/GetCrimeDataResponse")]
        string GetCrimeData(int zipCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/OmniWSDLServiceInterface/GetCrimeData", ReplyAction="http://tempuri.org/OmniWSDLServiceInterface/GetCrimeDataResponse")]
        System.Threading.Tasks.Task<string> GetCrimeDataAsync(int zipCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/OmniWSDLServiceInterface/FindNearestStore", ReplyAction="http://tempuri.org/OmniWSDLServiceInterface/FindNearestStoreResponse")]
        string FindNearestStore(string zipcode, string storeType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/OmniWSDLServiceInterface/FindNearestStore", ReplyAction="http://tempuri.org/OmniWSDLServiceInterface/FindNearestStoreResponse")]
        System.Threading.Tasks.Task<string> FindNearestStoreAsync(string zipcode, string storeType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/OmniWSDLServiceInterface/GetFutureWeatherData", ReplyAction="http://tempuri.org/OmniWSDLServiceInterface/GetFutureWeatherDataResponse")]
        string GetFutureWeatherData(string zipcode, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/OmniWSDLServiceInterface/GetFutureWeatherData", ReplyAction="http://tempuri.org/OmniWSDLServiceInterface/GetFutureWeatherDataResponse")]
        System.Threading.Tasks.Task<string> GetFutureWeatherDataAsync(string zipcode, System.DateTime date);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface OmniWSDLServiceInterfaceChannel : SoloTravelerApp.Weather_NearestStore_ServiceRef.OmniWSDLServiceInterface, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OmniWSDLServiceInterfaceClient : System.ServiceModel.ClientBase<SoloTravelerApp.Weather_NearestStore_ServiceRef.OmniWSDLServiceInterface>, SoloTravelerApp.Weather_NearestStore_ServiceRef.OmniWSDLServiceInterface {
        
        public OmniWSDLServiceInterfaceClient() {
        }
        
        public OmniWSDLServiceInterfaceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OmniWSDLServiceInterfaceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OmniWSDLServiceInterfaceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OmniWSDLServiceInterfaceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetCrimeData(int zipCode) {
            return base.Channel.GetCrimeData(zipCode);
        }
        
        public System.Threading.Tasks.Task<string> GetCrimeDataAsync(int zipCode) {
            return base.Channel.GetCrimeDataAsync(zipCode);
        }
        
        public string FindNearestStore(string zipcode, string storeType) {
            return base.Channel.FindNearestStore(zipcode, storeType);
        }
        
        public System.Threading.Tasks.Task<string> FindNearestStoreAsync(string zipcode, string storeType) {
            return base.Channel.FindNearestStoreAsync(zipcode, storeType);
        }
        
        public string GetFutureWeatherData(string zipcode, System.DateTime date) {
            return base.Channel.GetFutureWeatherData(zipcode, date);
        }
        
        public System.Threading.Tasks.Task<string> GetFutureWeatherDataAsync(string zipcode, System.DateTime date) {
            return base.Channel.GetFutureWeatherDataAsync(zipcode, date);
        }
    }
}
